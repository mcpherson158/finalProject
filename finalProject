# -*- coding: utf-8 -*-
"""

Created on Thu Nov 10 19:26:26 2016

@author: jrathman
"""

import numpy as np
import matplotlib.pyplot as plt
# import matplotlib.animation as animation


class robovac:

    def __init__(self, batteryLife):
        self.batteryLife = batteryLife*60
        self.xpos = 0
        self.ypos = 0
        self.theta = np.pi / 4

    def move(self):

        #Velocity in feet per second
        v = 0.5
        if self.xpos >= 10:
            if self.ypos >= 10:
                thetaRange = (np.pi, 3*np.pi/2)

            elif self.ypos <= -10:
                thetaRange = (np.pi/2 , np.pi)
            else:
                thetaRange = (np.pi/2 , 3*np.pi/2)
        elif self.ypos >= 10:
            thetaRange = (np.pi , 2*np.pi)

        elif self.xpos <= -10:
            if self.ypos >= 10:
                thetaRange = (3*np.pi/2, 2*np.pi)
            elif self.ypos <= -10:
                thetaRange = (0,np.pi/2)
            else:
                thetaRange = (3*np.pi/2 , 5*np.pi/2)
        elif self.ypos <= -10:
            thetaRange = (0 , np.pi)


        if abs(self.xpos) >= 10 or abs(self.ypos) >= 10:
            thetaHigh , thetaLow = thetaRange
            #the following comes from plugging in generic high and low values
            #into point-slop formula for a line
            self.theta = (thetaHigh - thetaLow) * np.random.random() + thetaLow
        self.xpos = v*np.cos(self.theta) + self.xpos
        self.ypos = v*np.sin(self.theta) + self.ypos

        self.batteryLife -= 1

#Main program
def stumble(batteryLife = 30):

    particle1 = robovac(batteryLife) #create an instance of the drunkard class
    particle2 = robovac(batteryLife) #create an instance of the drunkard class


    plt.figure() #can use facecolor = 'white' argument to change figure background
    ax = plt.axes()
    #ax = plt.axes(xlim=(-80, 80), ylim = (-80, 80))
    point, = ax.plot([], [], 'bo' , markersize=12)
    ax.set_xlim(-10, 10)
    ax.set_ylim(-10, 10)
    plt.title('Stumbling through the dark...')

    p = (particle1,particle2)

    while iggy.batteryLife > 0:
        point.set_data(p.xpos, p.ypos)
        iggy.move()
        plt.pause( 60 / (batteryLife * 60) ) #this causes a stupid matplotlib warning - ignore!
stumble()
